directive @hasRole(role: Role!) on FIELD_DEFINITION

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input CartItem {
  id: String!
  amount: Int!
}

enum CategoryType {
  BAG
  OTHER
  WALLET
  BACKPACK
  SUITCASE
}

enum Gender {
  FEMALE
  MALE
  UNISEX
}

type HideProductResponse {
  isHidden: Boolean!
}

enum MainTag {
  STOCK
  NEW
  TOP
}

type Mutation {
  createOrder(input: OrderInput): OrderResponse
  createProduct(input: NewProductInput): NewProductResponse
  updateProduct(input: UpdateProductInput): UpdateProductResponse
  hideProduct(id: ID!, isHidden: Boolean!): HideProductResponse
}

input NewProductInput {
  title: String!
  price: Int!
  discountPrice: Int
  preview: Upload!
  images: [String]
  tags: [String]
  description: String
}

type NewProductResponse {
  message: String!
}

type NotFound {
  message: String!
}

input OrderInput {
  name: String!
  surname: String!
  email: String!
  phone: String!
  cityId: String!
  postOfficeId: String!
  cartItems: [CartItem!]!
}

type OrderResponse {
  message: String!
}

input PriceRange {
  lt: Int!
  gt: Int!
}

type PriceRangeType {
  lt: Int!
  gt: Int!
}

type Product {
  id: ID!
  title: String!
  isHidden: Boolean!
  currentPrice: Int!
  basePrice: Int!
  amount: Int!
  instock: Boolean!
  gender: String!
  preview: String!
  images: [String!]!
  tags: [String!]!
  mainTag: String!
  description: String!
}

input ProductFilter {
  gender: [Gender]
  isHidden: Boolean
  instock: Boolean
  mainTag: MainTag
  price: PriceRange
  category: [CategoryType]
}

union ProductResult = Product | NotFound

type ProductsResponse {
  products: [Product!]!
  priceRange: PriceRangeType!
}

type Query {
  product(id: ID!): ProductResult
  allProducts(filter: ProductFilter!): ProductsResponse!
  cartProducts(input: [CartItem!]): [Product!]!
  productsByID(input: [String!]): [Product!]!
}

enum Role {
  ADMIN
  USER
}

input UpdateProductInput {
  id: ID!
  title: String!
  price: Int!
  discount: Int!
  instock: Boolean!
  description: String
}

type UpdateProductResponse {
  message: String!
}

scalar Upload
