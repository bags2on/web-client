"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

input CartItem {
  id: String!
  amount: Int!
}

type Mutation {
  createProduct(input: NewProductInput): NewProductResponse
  createOrder(input: OrderInput): OrderResponse
}

input NewProductInput {
  title: String!
  price: Int!
  discountPrice: Int
  preview: Upload!
  images: [String]
  tags: [String]
  description: String
}

type NewProductResponse {
  message: String!
}

input OrderInput {
  name: String!
  surname: String!
  email: String!
  phone: String!
  cityId: String!
  postOfficeId: String!
  cartItems: [CartItem!]!
}

type OrderResponse {
  message: String!
}

type Product {
  id: ID!
  title: String!
  price: Int!
  discount: Int!
  amount: Int!
  instock: Boolean!
  preview: String!
  images: [String!]!
  tags: [String!]!
  mainTag: String!
  description: String!
}

type Query {
  products: [Product!]!
  product(id: ID!): Product
  productsByID(input: [CartItem!]): [Product!]!
}

scalar Upload
